import{w as f,V as w,R as y,e as c,d as a,P as p,C as _,k as V,m as v}from"./index-6a6230c9.js";import{h as C}from"./Container-9418a0ab.js";import{r as H}from"./GroupContainer-0b7beaf3.js";import{f as b,d as T}from"./LayerView-cd220b33.js";import{i as g}from"./GraphicContainer-c34325e2.js";import{r as m}from"./GraphicsView2D-07d0f1e3.js";import"./EffectView-39a467a4.js";import"./definitions-706e5a41.js";import"./enums-b14466b3.js";import"./Texture-37d17670.js";import"./WGLContainer-3675b209.js";import"./VertexArrayObject-91d61933.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-ebca2423.js";import"./enums-f1a6a48a.js";import"./number-e491b09e.js";import"./ProgramTemplate-a52cf5ca.js";import"./GeometryUtils-cbd74bc2.js";import"./alignmentUtils-ae955d28.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./earcut-a5bef5a4.js";import"./featureConversionUtils-c181d337.js";import"./OptimizedFeature-4701473b.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./OptimizedGeometry-196224d4.js";import"./BaseGraphicContainer-b24d98f5.js";import"./FeatureContainer-4c67d183.js";import"./AttributeStoreView-8e72328e.js";import"./TiledDisplayObject-76e608d4.js";import"./visualVariablesUtils-bee607f7.js";import"./cimAnalyzer-6cdd137c.js";import"./fontUtils-9bdd13b2.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-b8e39672.js";import"./floatRGBA-6b040bc0.js";import"./ExpandedCIM-33d4a450.js";import"./util-0101427e.js";import"./TileContainer-a9c0a940.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtilsSync-175c90bd.js";import"./projectionSupport-69413270.js";import"./json-48e3ea08.js";import"./Matcher-e3085630.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-d3c4c506.js";import"./devEnvironmentUtils-5002a058.js";import"./webStyleSymbolUtils-6cfdefea.js";import"./ComputedAttributeStorage-0e81f987.js";import"./arcadeTimeUtils-7a0c20b0.js";import"./executionError-c92d3b85.js";const d="sublayers",n="layerView";let l=class extends b(T){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new H}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const h=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&h.popupTemplate&&(r.popupTemplate=h.popupTemplate),r.sourceLayer=r.layer=this.layer}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof f?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):w.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(y);return e!=null&&e.length?(this._addHighlight(e),c(()=>this._removeHighlight(e))):c()}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const h=new g(this.view.featuresTilingScheme),r=new m({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:h});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.addHandles([a(()=>s.visible,o=>r.container.visible=o,p),a(()=>r.updating,()=>this.notifyChange("updating"),p)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(_(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),d)}detach(){this._destroyGraphicsViews(),this.removeHandles(d)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const h=new C,r=new g(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const o=new m({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.addHandles([s.on("graphic-update",o.graphicUpdateHandler),a(()=>s.visible,u=>o.container.visible=u,p),a(()=>o.updating,()=>this.notifyChange("updating"),p)],n),h.addChild(o.container),this.container.addChild(h),i.push(o)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=V([v("esri.views.2d.layers.MapNotesLayerView2D")],l);const Ti=l;export{Ti as default};
