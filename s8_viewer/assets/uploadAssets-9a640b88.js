import{aw as m,a8 as y,au as u,dE as J,s as p,e$ as O,d5 as k,g as G,e_ as V,go as W,bp as x,eX as X,bo as _}from"./index-6a6230c9.js";import{m as K,g as Q,a as A,i as N,N as Y}from"./External-02365206.js";const U=1e6,D=20*U,Z=2e9,ee=3;async function te({data:e,name:a,description:t},s,r){let n=null;try{const o=m(s,"uploads"),i=m(o,"info"),{data:c}=await y(i,{query:{f:"json"},responseType:"json"});u(r);const l=J(s),d=c.maxUploadFileSize*U,w=l?Z:d,b=l?Math.min(D,d):D;if(e.size>w)throw new Error("Data too large");const P=m(o,"register"),{data:$}=await y(P,{query:{f:"json",itemName:a,description:t},responseType:"json",method:"post"});if(u(r),!$.success)throw new Error("Registration failed");const{itemID:R}=$.item;n=m(o,R);const C=m(n,"uploadPart"),L=Math.ceil(e.size/b),h=new Array;for(let f=0;f<L;++f)h.push(e.slice(f*b,Math.min((f+1)*b,e.size)));const g=h.slice().reverse(),j=new Array,B=async()=>{for(;g.length!==0;){const f=h.length-g.length,E=g.pop(),T=new FormData,H=E;T.append("f","json"),T.append("file",H),T.append("partId",`${f}`);const{data:M}=await y(C,{timeout:0,body:T,responseType:"json",method:"post"});if(u(r),!M.success)throw new Error("Part upload failed")}};for(let f=0;f<ee&&g.length!==0;++f)j.push(B());await Promise.all(j);const z=m(n,"commit"),{data:F}=await y(z,{query:{f:"json",parts:h.map((f,E)=>E).join(",")},responseType:"json",method:"post"});if(u(r),!F.success)throw new Error("Commit failed");return F.item}catch(o){if(n!=null){const i=m(n,"delete");await y(i,{query:{f:"json"},responseType:"json",method:"post"})}throw o}}async function Ee(e,a,t){return e.length?Promise.all(e.map(s=>ae(s,a,t))):[]}async function ae(e,{layer:a,ongoingUploads:t},s){const r=t.get(e);if(r)return r;if(!he(a))throw new p(`${a.type}-layer:upload-failure`,"Layer does not support asset uploads.",new Error);if(se(e,a))return e;const n=oe(e,a,s);t.set(e,n);try{await n}finally{t.delete(e)}return e}function se(e,a){const{parsedUrl:t}=a;return t!=null&&e.metadata.externalSources.some(s=>K(s,t))}async function oe(e,a,t){const{metadata:s}=e,{displaySource:r}=s,n=v(r==null?void 0:r.source,a),o=!!n,i=s.externalSources.length>0,c=o?ne(n,a,t):i?re(e,a,t):ie(e,a,t),l=await c;return u(t),e.addExternalSources([l]),e}async function ne(e,a,t){return{source:await S(e,a,t),original:!0}}async function re(e,a,t){const s=I(a),{externalSources:r}=e.metadata,n=ue(r,a);if(!n)throw new p(`${a.type}-layer:upload-failure`,"Could not find an external source that is supported by the service.",new Error);const o=await S(n,a,t);return e.addExternalSources([{source:o,original:!0}]),{source:await me(o,a,s)}}async function ie(e,a,t){const s=le(e,a,t);return{source:await q([s],a,t),extent:e.extent.clone(),original:!0}}async function le(e,a,t){const s=I(a),r=await e.load(t),n=await r.toBinaryGLTF({ignoreLocalTransform:!0});u(t);const o=await n.buffer();return u(t),{blob:new Blob([o.data],{type:o.type}),assetName:`${O()}.glb`,assetType:s}}function ue(e,a){for(const t of e){const s=v(t.source,a);if(s)return s}return null}function v(e,a){if(!e)return null;const{infoFor3D:{supportedFormats:t,editFormats:s}}=a,r=Y(e),n=new Array;let o=!1;for(let i=0;i<r.length;++i){const c=ce(r[i],t);if(!c)return null;s.includes(c.assetType)&&(o=!0),n.push(c)}return o?n:null}function ce(e,a){const t=Q(e,a);return t?{asset:e,assetType:t}:null}async function S(e,a,t){return q(e.map(s=>pe(s,t)),a,t)}async function q(e,a,t){const s=await Promise.all(e.map(async n=>{const o=de(await n,a,t);return u(t),o}));u(t);const{uploadResults:r}=await fe(s.map(({item:n})=>n),a,t);return u(t),e.map((n,o)=>ye(s[o],r[o],a))}async function pe(e,a){const{asset:t,assetType:s}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:s};const r=await t.toBlob(a);return u(a),{blob:r,assetName:t.assetName,assetType:s}}async function de(e,a,t){const{blob:s,assetType:r,assetName:n}=e;let o=null;try{const i=await te({data:s,name:n},a.url,t);u(t),o={assetType:r,assetUploadId:i.itemID}}catch(i){k(i),G.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${a.url} does not support the REST Uploads API.`)}if(!o){const i=await V(s);if(u(t),!i.isBase64)throw new p(`${a.type}-layer:uploadAssets-failure`,"Expected gltf data in base64 format after conversion.",new Error);o={assetType:r,assetData:i.data}}if(!o)throw new p(`${a.type}-layer:uploadAssets-failure`,"Unable to prepare uploadAsset request options.",new Error);return{item:o,assetName:n}}async function fe(e,a,t){const s=await y(m(a.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(u(t),s.data.uploadResults.length!==e.length)throw new p(`${a.type}-layer:uploadAssets-failure`,`Bad response. Uploaded ${e.length} items and received ${s.data.uploadResults.length} results.`,new Error);return s.data}function ye(e,a,t){const{success:s}=a;if(!s){const{error:l}=a;throw new p(`${t.type}-layer:upload-failure`,`Failed to upload mesh file ${e.assetName}. Error code: ${(l==null?void 0:l.code)??"-1"}. Error message: ${(l==null?void 0:l.messages)??"unknown"}`,new Error)}const{assetHash:r}=a,{assetName:n,item:{assetType:o}}=e,{infoFor3D:{supportedFormats:i}}=t,c=W(o,i);if(!c)throw new p(`${t.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${o}, but it does not list it in its supported formats.`,new Error);return new A(n,c,[new N(`${t.parsedUrl.path}/assets/${r}`,r)])}async function me(e,a,t){var l;const s=e.map(({assetName:d,parts:w})=>({assetName:d,assetHash:w[0].partHash})),r=(l=a.capabilities)==null?void 0:l.operations.supportsAsyncConvert3D,n={query:{f:"json",assets:JSON.stringify(s),transportType:"esriTransportTypeUrl",targetFormat:t,async:r},responseType:"json",timeout:0},o=m(a.parsedUrl.path,"convert3D"),i=(r?await we(o,n):await y(o,n)).data,{infoFor3D:{supportedFormats:c}}=a;return i.assets.map(d=>{const w=x(d.contentType,c);if(!w)throw new p(`${a.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${w}, but it does not list it in its supported formats.`,new Error);return new A(d.assetName,d.contentType,[new N(d.assetURL,d.assetHash)])})}async function we(e,a){const t=(await y(e,a)).data.statusUrl;for(;;){const s=(await y(t,{query:{f:"json"},responseType:"json"})).data;switch(s.status){case"Completed":return y(s.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new p("async-convert3D-failed","asynchronous convert3D call failed.");case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new p("async-convert3D-failed","asynchronous convert3D call failed (undefined response status)")}await X(ge)}}function he(e){return!!e.infoFor3D&&!!e.url}function I(e){const{infoFor3D:a}=e,t=x("model/gltf-binary",a.supportedFormats)??_("glb",a.supportedFormats);if(!t)throw new p(`${e.type}-layer:upload-failure`,"Layer does not support glb.",new Error);return t}const ge=1e3;export{Ee as uploadAssets};
