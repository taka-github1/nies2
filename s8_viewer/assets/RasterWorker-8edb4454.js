import{cx as r,cy as l,cz as c,cA as m,aQ as i,cB as f,cC as u,aM as p,cD as S,cE as d,cF as x,cG as y,cH as O,cI as h,cJ as N,cK as J,cL as B,cM as P,cN as b,cO as g}from"./index-6a6230c9.js";class w{convertVectorFieldData(t){const e=r.fromJSON(t.pixelBlock),s=l(e,t.type);return Promise.resolve(s!=null?s.toJSON():null)}computeStatisticsHistograms(t){const e=r.fromJSON(t.pixelBlock),s=c(e);return Promise.resolve(s)}async decode(t){const e=await m(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=r.fromJSON(t.pixelBlock),t.extent=t.extent?i.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){var e;this.symbolizer=f.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=u(t.rasterFunctionJSON)}async process(t){var s;const e=this.rasterFunction.process({extent:i.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(o=>o!=null?r.fromJSON(o):null),primaryPixelSizes:(s=t.primaryPixelSizes)==null?void 0:s.map(o=>o!=null?p.fromJSON(o):null),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(r.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e!=null&&e.toJSON())}estimateStatisticsHistograms(t){const e=S(r.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=d(r.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return e&&e.forEach((s,o)=>{e.set(o,s==null?void 0:s.toJSON())}),Promise.resolve(e)}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(n=>n?new r(n):null),s=x(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let o,a=s;return t.coefs&&(a=y(s,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(o=O(t.destDimension,t.gcsGrid),a=h(a,t.isUV?"vector-uv":"vector-magdir",o)),{pixelBlock:a==null?void 0:a.toJSON(),localNorthDirections:o}}async createFlowMesh(t,e){const s={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:o,indexData:a}=await N(t.meshType,t.simulationSettings,s,e.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:a.buffer},transferList:[o.buffer,a.buffer]}}async getProjectionOffsetGrid(t){const e=i.fromJSON(t.projectedExtent),s=i.fromJSON(t.srcBufferExtent);let o=null;t.datumTransformationSteps&&(o=new J({steps:t.datumTransformationSteps})),(t.includeGCSGrid||B(e.spatialReference,s.spatialReference,o))&&await P();const a=t.rasterTransform?b(t.rasterTransform):null;return g({...t,projectedExtent:e,srcBufferExtent:s,datumTransformation:o,rasterTransform:a})}}export{w as default};
