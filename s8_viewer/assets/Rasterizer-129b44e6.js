import{a9 as _,aa as b}from"./index-6a6230c9.js";import{M as I,i as g,l as v,t as M,a as A}from"./cimAnalyzer-6cdd137c.js";import{r as P,e as k}from"./rasterizingUtils-9217d732.js";const U=512;class R{constructor(e){this._resourceManager=e,this._rasterizationCanvas=null}dispose(){this._rasterizationCanvas=null}rasterizeJSONResource(e,n,c){if(this._rasterizationCanvas||(this._rasterizationCanvas=document.createElement("canvas")),e.type==="simple-fill"||e.type==="esriSFS"){const[a,i,f]=P(this._rasterizationCanvas,e.style,n);return{size:[i,f],image:new Uint32Array(a.buffer),sdf:!1,simplePattern:!0,anchorX:0,anchorY:0,rasterizationScale:_(Math.ceil(n))}}if(e.type==="simple-line"||e.type==="esriSLS"||e.type==="line"&&e.dashTemplate){let a,i;if(e.type==="simple-line"||e.type==="esriSLS")switch(a=I(e.style,e.cap),e.cap){case"butt":i="Butt";break;case"square":i="Square";break;default:i="Round"}else a=e.dashTemplate,i=e.cim.capStyle;const[f,d,C]=k(a,i);return{size:[d,C],image:new Uint32Array(f.buffer),sdf:!0,simplePattern:!0,anchorX:0,anchorY:0}}let t,h=null,u=null,r=1;if(e.type==="simple-marker"||e.type==="esriSMS"||e.type==="line-marker"?(t=g.fromSimpleMarker(e),u=v(t)):e.cim&&e.cim.type==="CIMHatchFill"?(t=g.fromCIMHatchFill(e.cim,n),h=new M(t.frame.xmin,-t.frame.ymax,t.frame.xmax-t.frame.xmin,t.frame.ymax-t.frame.ymin),r=n):e.cim.markerPlacement&&e.cim.markerPlacement.type==="CIMMarkerPlacementInsidePolygon"?(t=g.fromCIMInsidePolygon(e.cim),h=new M(t.frame.xmin,-t.frame.ymax,t.frame.xmax-t.frame.xmin,t.frame.ymax-t.frame.ymin)):(t=e.cim,e.avoidSDFRasterization||(u=v(t))),u&&!c){const[a,i,f]=A(u);return a?{size:[i,f],image:new Uint32Array(a.buffer),sdf:!0,simplePattern:!0,anchorX:0,anchorY:0,rasterizationScale:r}:null}const[p,y,o,l,m]=g.rasterize(this._rasterizationCanvas,t,h,this._resourceManager,!c);return p?{size:[y,o],image:new Uint32Array(p.buffer),sdf:!1,simplePattern:!1,anchorX:l,anchorY:m}:null}rasterizeImageResource(e,n,c,t){this._rasterizationCanvas||(this._rasterizationCanvas=document.createElement("canvas")),this._rasterizationCanvas.width=e,this._rasterizationCanvas.height=n;const h=this._rasterizationCanvas.getContext("2d");c instanceof ImageData?h.putImageData(c,0,0):(c.setAttribute("width",`${e}px`),c.setAttribute("height",`${n}px`),h.drawImage(c,0,0,e,n));const u=h.getImageData(0,0,e,n),r=new Uint8Array(u.data);if(t){for(const a of t)if(a&&a.oldColor&&a.oldColor.length===4&&a.newColor&&a.newColor.length===4){const[i,f,d,C]=a.oldColor,[z,w,x,S]=a.newColor;if(i===z&&f===w&&d===x&&C===S)continue;for(let s=0;s<r.length;s+=4)i===r[s]&&f===r[s+1]&&d===r[s+2]&&C===r[s+3]&&(r[s]=z,r[s+1]=w,r[s+2]=x,r[s+3]=S)}}let p;for(let a=0;a<r.length;a+=4)p=r[a+3]/255,r[a]=r[a]*p,r[a+1]=r[a+1]*p,r[a+2]=r[a+2]*p;let y=r,o=e,l=n;const m=U;if(o>=m||l>=m){const a=o/l;a>1?(o=m,l=Math.round(m/a)):(l=m,o=Math.round(m*a)),y=new Uint8Array(4*o*l);const i=new Uint8ClampedArray(y.buffer);b(r,e,n,i,o,l,!1)}return{size:[o,l],image:new Uint32Array(y.buffer),sdf:!1,simplePattern:!1,anchorX:0,anchorY:0}}}export{R as c};
